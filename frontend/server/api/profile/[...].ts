/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
 
import axios from 'axios';
import { getServerSession } from '#auth'
import type { Session } from 'next-auth';

export default defineEventHandler(async (event:any) => {
    type additionalprops = {accessToken?:string} 
    let session:any=null
    // console.log("profile api-------------------------")
    
    try {
        session = await getServerSession(event)
        
    } catch (error) {
        return sendRedirect(event, '/login', 401)
    }
    if(!session) {
        throw createError({ statusText: 'Unauthorized', status: 302 })
     }
    return new Promise<any>(async (resolve, reject) => {
        
        const seperateSymbol = '.';
        const documentLink = event.context.params?._ ?? ''
        const accessToken = session?.accessToken;
        let forwardData: any = {};

        const req = event.node.req;

        if(req.method == 'POST' || req.method == 'PUT'  || req.method == 'PATCH') {

            forwardData = await readBody(event);
        } else {
            forwardData = getQuery(event);
        }

        // if(typeof forwardData === "object" && "_branch" in forwardData) {
        //     xOrg = xOrg + forwardData._branch;
        //     delete forwardData._branch;
        // }

        const frontEndRes = event.node.res;
        const url = process.env.SIMPLEAPP_BACKEND_URL + `/profile/${documentLink}`;
        // console.warn('backend server-----',req.method,url,forwardData)
        const axiosConfig: any = {
            method: req.method,
            url: url,
            headers: {
                Authorization: `Bearer ${accessToken}`,
            },
            data: forwardData,
            params: forwardData,
        }
        
        // if(key === 'system') {
        //     axiosConfig.headers["X-Global"] = true;
        //     delete axiosConfig.headers["X-Org"];
        // }

        // if(otherLink.includes('avatar')) {
        //     axiosConfig.responseType = 'arraybuffer';
        //     // axiosConfig.headers['Acceptable'] = 'text/html,image/avif,image/webp,image/apng';
        // }

        axios(axiosConfig).then((res) => {
            if (res.headers['content-type'] === 'image/png') {
                // Set the response headers for the image
                frontEndRes.setHeader('Content-Type', 'image/png');
                frontEndRes.setHeader('Content-Disposition', 'inline');

                // Send the image data as the response body
                frontEndRes.end(Buffer.from(res.data, 'binary'));
            } else {
                // For non-image responses, set the Content-Type header and send the response body
                // setHeader(event, 'Content-type', <string>res.headers['Content-Type']);

                frontEndRes.statusCode = res.status;
                if(res.statusText) {
                    frontEndRes.statusMessage = res.statusText;
                }

                resolve(res.data);
            }

        }).catch((error) => {            
            if(!error?.response){
                console.log("backend server no response ",error.code)              
                reject({ 
                    statusMessage:"backendServerDownMessage",
                    statusCode: 503,                    
                });            
            }else{

                if (error.response?.status && error.response.status == 401) {
                    return sendRedirect(event, '/login', 401)
                }
                reject({ 
                    statusMessage: error.response.statusText, 
                    statusCode: error.response.status ,
                    data: error.response.data
                });            // resolve({ status: 'ok' })
                // throw createError({ statusMessage: 'Bad Requests', statusCode: 404 })
            }
        })

        // resolve({
        //     status: 'ok'
        // })
    })
    
})