/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */

 
import axios, { AxiosRequestConfig } from 'axios';
import { getServerSession } from '#auth'
import type { Session } from 'next-auth';

export default defineEventHandler(async (event:any) => {
    type additionalprops = {accessToken?:string} 
    let session:any=null
    
    
    try {
        session = await getServerSession(event)
        
    } catch (error) {
        throw createError({ statusText: 'Unauthorized', status: 302 })
    }
    if(!session) {
       throw createError({ statusText: 'Unauthorized', status: 302 })
    }

    return new Promise<any>(async (resolve, reject) => {       
        const xOrg = event.context.params?.xorg ?? ''
        const documentLink = event.context.params?._ ?? ''
        const accessToken = session?.accessToken;
        

        let forwardData: any = {};
        const req = event.node.req;
        let bodydata: any
        let querydata:any
        querydata = getQuery(event);
        if(req.method == 'POST' || req.method == 'PUT' || req.method == 'PATCH' ) {
            bodydata = await readBody(event);
        } 


        const frontEndRes = event.node.res;
        const url = process.env.SIMPLEAPP_BACKEND_URL + '/' + documentLink;
        const axiosConfig: AxiosRequestConfig = {
            method: req.method,
            url: url,
            headers: {
                Authorization: `Bearer ${accessToken}`,
                'X-Org': xOrg,
            },
            data: bodydata,
            params: querydata,
        }
        axios(axiosConfig).then((res) => {
            if (res.headers['content-type'] === 'image/png') {
                // Set the response headers for the image
                frontEndRes.setHeader('Content-Type', 'image/png');
                frontEndRes.setHeader('Content-Disposition', 'inline');

                // Send the image data as the response body
                frontEndRes.end(Buffer.from(res.data, 'binary'));
            } else {
                // For non-image responses, set the Content-Type header and send the response body
                // setHeader(event, 'Content-type', <string>res.headers['Content-Type']);

                frontEndRes.statusCode = res.status;
                if(res.statusText) {
                    frontEndRes.statusMessage = res.statusText;
                }

                resolve(res.data);
            }

        }).catch((error) => {
            if(!error?.response){
                console.log("backend server no response ",error.code)              
                reject({ 
                    statusMessage:"backendServerDownMessage",
                    statusCode: 503,                    
                });            
            }else if (error.response.status == 401) {
                return sendRedirect(event, '/login', 302)             
            }else{
                const responseCode = error.response.data?.statusCode ? error.response.data.statusCode : error.response.status 
                const responseMsg = error.response.data ? error.response.data.message : error.response.statusText 
                // reject(error.data)
                // console.log("----error.response.data--",responseMsg,error.response.data,error.response.status,responseCode)
                reject({ 
                    statusMessage: responseMsg, 
                    statusCode: responseCode ,
                    data: error.response.data
                });         
                
            }

     
        })

        // resolve({
        //     status: 'ok'
        // })
    })
    
})