/**
 * This file was automatically generated by simpleapp generator. It is changable
 * last change 2024-04-24
 * Author: Ks Tan
 */

import { Injectable } from '@nestjs/common';
import { SimpleAppRobotUserService } from '../generate/commons/robotuser.service';
import { UserContext } from '../generate/commons/user.context';
import { UserService } from './user.service';
// import { TeacherService } from './teacher.service';

@Injectable()
export class UserResolverService {
  constructor(
    private userService: UserService,
    // private teacherService: TeacherService,
    private robotUserService: SimpleAppRobotUserService,
  ) {}
  // async teacher(assignvalue: string, data: any) {
    // console.log('assign value for teacher', assignvalue);
    // const appuser = this.robotUserService.prepareAppUser(data);
    // console.log('gettenant', appuser.getBranchFilter());
    // return this.resolve(appuser, 'teacher', assignvalue, data);
  // }
  async resolve(appuser: UserContext, usertype: string, id: string, data: any) {
    let result = '';
    switch (usertype) {
      case 'user':
        result = await this.resolveUser(appuser, id, data);
        break;
      // case 'teacher':
      //   result = await this.resolveTeacher(appuser, id, data);
      //   break;

      case 'group':
        // result = await this.resolveTeacher(appuser,id,data)
        break;
    }
    return result;
  }

  async getUser(appuser: UserContext, email: string) {
    if (!email) return undefined;
    console.log('get user from email ', email);
    const user = await this.userService.search(appuser, { email: email });
    console.log('user result', user);
    if (user && user.length > 0) return user[0].uid;
    else return undefined;
  }
  // async resolveTeacher(
  //   appuser: UserContext,
  //   id: string | undefined,
  //   data: any,
  // ) {
  //   if (!id) return undefined;
  //   console.log('Find teacher::', id);
  //   const teacher = await this.teacherService.findById(appuser, id);
  //   console.log('teacher', teacher);
  //   return this.getUser(appuser, teacher.email);
  // }

  async resolveUser(appuser: UserContext, id: string | undefined, data: any) {
    const user = await this.userService.findById(appuser, id);
    return user.uid;
  }
}
