/* tslint:disable */
/* eslint-disable */
/**
 * prinf format microservice
 * print format microservice
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kstan@simitgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * generate pdf
         * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
         * @param {string} id data _id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPdf: async (formatid: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formatid' is not null or undefined
            assertParamExists('runPdf', 'formatid', formatid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('runPdf', 'id', id)
            const localVarPath = `/api/print/{formatid}/{id}`
                .replace(`{${"formatid"}}`, encodeURIComponent(String(formatid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication simbiz_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "simbiz_auth", [], configuration)

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-org", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate base64 pdf string
         * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
         * @param {string} id data _id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPdfBase64: async (formatid: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formatid' is not null or undefined
            assertParamExists('runPdfBase64', 'formatid', formatid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('runPdfBase64', 'id', id)
            const localVarPath = `/api/print/{formatid}/{id}/base64`
                .replace(`{${"formatid"}}`, encodeURIComponent(String(formatid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication simbiz_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "simbiz_auth", [], configuration)

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-org", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * generate pdf
         * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
         * @param {string} id data _id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPdf(formatid: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPdf(formatid, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.runPdf']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate base64 pdf string
         * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
         * @param {string} id data _id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPdfBase64(formatid: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPdfBase64(formatid, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.runPdfBase64']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * generate pdf
         * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
         * @param {string} id data _id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPdf(formatid: string, id: string, options?: any): AxiosPromise<File> {
            return localVarFp.runPdf(formatid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate base64 pdf string
         * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
         * @param {string} id data _id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPdfBase64(formatid: string, id: string, options?: any): AxiosPromise<File> {
            return localVarFp.runPdfBase64(formatid, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * generate pdf
     * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
     * @param {string} id data _id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runPdf(formatid: string, id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).runPdf(formatid, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate base64 pdf string
     * @param {string} formatid format name, can be invoice,purchaseorder, or formatid like xxxx-yyy-zzz-xxx in database 
     * @param {string} id data _id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runPdfBase64(formatid: string, id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).runPdfBase64(formatid, id, options).then((request) => request(this.axios, this.basePath));
    }
}



